[{"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\index.js":"1","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\App.js":"2","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\store\\index.js":"3","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\pages\\dashboard.js":"4","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\pages\\mainmenupage.js":"5","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\pages\\intropage.js":"6","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\store\\Content.js":"7","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\store\\UserControls.js":"8","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\store\\SpotifyState.js":"9","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\store\\YouTubeState.js":"10","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\Welcome.js":"11","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\MusicContent.js":"12","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\MainMenu.js":"13","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\VideoContent.js":"14","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\WelcomeBack.js":"15","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\Navbar.js":"16","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\SpotifyPlayer.js":"17","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\MusicForm.js":"18","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\VideoForm.js":"19","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\server\\spotifyAuth.js":"20","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\MusicButton.js":"21","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\VideoButton.js":"22"},{"size":409,"mtime":1635536256025,"results":"23","hashOfConfig":"24"},{"size":621,"mtime":1636929531498,"results":"25","hashOfConfig":"24"},{"size":652,"mtime":1635536256482,"results":"26","hashOfConfig":"24"},{"size":711,"mtime":1636922633457,"results":"27","hashOfConfig":"24"},{"size":496,"mtime":1636922633456,"results":"28","hashOfConfig":"24"},{"size":3989,"mtime":1636922633457,"results":"29","hashOfConfig":"24"},{"size":1315,"mtime":1636413272474,"results":"30","hashOfConfig":"24"},{"size":1183,"mtime":1635536256481,"results":"31","hashOfConfig":"24"},{"size":1794,"mtime":1636928895080,"results":"32","hashOfConfig":"24"},{"size":2228,"mtime":1636413272474,"results":"33","hashOfConfig":"24"},{"size":2020,"mtime":1636413295237,"results":"34","hashOfConfig":"24"},{"size":2175,"mtime":1636413272470,"results":"35","hashOfConfig":"24"},{"size":1045,"mtime":1636916921353,"results":"36","hashOfConfig":"24"},{"size":2281,"mtime":1636413272472,"results":"37","hashOfConfig":"24"},{"size":1908,"mtime":1636931921669,"results":"38","hashOfConfig":"24"},{"size":889,"mtime":1636931668142,"results":"39","hashOfConfig":"24"},{"size":1565,"mtime":1636413272471,"results":"40","hashOfConfig":"24"},{"size":2930,"mtime":1636413272470,"results":"41","hashOfConfig":"24"},{"size":2541,"mtime":1636413272472,"results":"42","hashOfConfig":"24"},{"size":2373,"mtime":1636929295184,"results":"43","hashOfConfig":"24"},{"size":630,"mtime":1636413272469,"results":"44","hashOfConfig":"24"},{"size":629,"mtime":1636413272471,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18askv4",{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\index.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\App.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\store\\index.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\pages\\dashboard.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\pages\\mainmenupage.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\pages\\intropage.js",["95"],"\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useNavigate } from \"react-router\"\r\nimport { useParams } from \"react-router\"\r\nimport { spotifyActions } from \"../store/SpotifyState\"\r\nimport { useLocation } from \"react-router-dom\"\r\nimport Welcome from \"../components/Welcome\"\r\nimport WelcomeBack from \"../components/WelcomeBack\"\r\nimport styles from '../components/welcomeStyles.module.css'\r\n\r\n\r\n\r\n\r\n//url used to authorize the spotify api and retrieve an access token along with the scope of parameters that we are asking permission for.\r\n// const AUTHORIZE = 'https://accounts.spotify.com/authorize?client_id=50885eb87ce14757bdde10e7fb01f91a&response_type=code&redirect_uri=http://localhost:3000&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state'\r\n\r\n\r\n\r\nfunction Intropage() {\r\n    const location = useLocation()\r\n    console.log(location)\r\n    // the slice needs to be at 6 in order for the api call to work DO NOT TOUCH\r\n    const locationCode = location.search.slice(6)\r\n    console.log(`current location code from slice: ${locationCode}`)\r\n    console.log(`current location CODE SLICE from slice: ${location.search.slice(0, 6)}`)\r\n\r\n    const params = useParams()\r\n    console.log(`current code from params ${params.musicAuthCode}`)\r\n\r\n    const authlink = useSelector((state) => state.spotify.spotifyAuthLink)\r\n    const isAuth = useSelector((state) => state.spotify.isSpotifyAuth)\r\n    const musicPassword = useSelector((state) => state.spotify.authcode)\r\n    const musicToken = useSelector((state) => state.spotify.accesstoken)\r\n    const musicRefresh = useSelector((state) => state.spotify.refreshtoken)\r\n    const musicEx = useSelector((state) => state.spotify.expiresin)\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    function spotifyAuthToggler() {\r\n        dispatch(spotifyActions.updateSpotifyAuth())\r\n    }\r\n\r\n    function userSpotifyAuthHandler() {\r\n        // dispatch(spotifyActions.updateSpotifyCode(locationCode))\r\n        window.location.href = authlink\r\n        // requestSpotifyAuth()\r\n        console.log(`current code from redirect button: ${musicPassword}`)\r\n    }\r\n\r\n\r\n    // const client_id = useSelector((state) => state.spotify.clientid)\r\n    // const client_secret = useSelector((state) => state.spotify.clientsecret)\r\n\r\n    // function requestSpotifyAuth() {\r\n    // const redirect_uri = \"http://localhost:3000\"\r\n    // const authlink = \"https://accounts.spotify.com/authorize\"\r\n    // var url = authlink;\r\n    // url += \"?client_id=\" + client_id;\r\n    // url += \"&response_type=code\";\r\n    // url += \"&redirect_uri=\" + encodeURI(redirect_uri);\r\n    // // url += \"&show_dialog=true\";\r\n    // // url += \"&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private\";\r\n    // window.location.href = url\r\n    // }\r\n\r\n    // first page load should fail, passes nothing into locationCode, should work on return\r\n\r\n\r\n    //console logging all state\r\n    console.log(`current token: ${musicToken}`)\r\n    console.log(`current code: ${musicPassword}`)\r\n    console.log(`current refresh: ${musicRefresh}`)\r\n    console.log(`current expire: ${musicEx}`)\r\n\r\n    console.log(`page loaded is auth ${isAuth}`)\r\n\r\n    // if (locationCode.length > 10) {\r\n    //     \r\n    // }\r\n\r\n\r\n\r\n    if (locationCode.length > 20 & location.search.slice(0, 6) === \"?code=\") {\r\n        dispatch(spotifyActions.updateSpotifyCode(locationCode))\r\n        return (\r\n            <div className={styles.bg}>\r\n                <WelcomeBack newCode={locationCode} />\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={styles.bg}>\r\n                <Welcome userWelcome={spotifyAuthToggler} onRedirect={userSpotifyAuthHandler} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Intropage","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\store\\Content.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\store\\UserControls.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\store\\SpotifyState.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\store\\YouTubeState.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\Welcome.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\MusicContent.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\MainMenu.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\VideoContent.js",["96"],"import { useState } from \"react\"\r\nimport YouTube from \"react-youtube\"\r\nimport styles from '../components/MainMenuStyles.module.css'\r\n\r\nvar getYouTubeID = require('get-youtube-id')\r\n\r\nfunction VideoContent() {\r\n\r\n    let totalVideoAvailable = localStorage.getItem(\"videocodelength\")\r\n    const [arrayNum, setArrayNumber] = useState(0)\r\n\r\n    function nextHandler() {\r\n        setArrayNumber(arrayNum + 1)\r\n    }\r\n\r\n    function prevHandler() {\r\n        setArrayNumber(arrayNum - 1)\r\n    }\r\n\r\n    function onReady(e) {\r\n        // access to player in all event handlers via event.target\r\n        e.target.playVideo();\r\n        e.target.setVolume(40)\r\n    }\r\n\r\n    let youtubeFullCode = localStorage.getItem(`videocontentcode${arrayNum}`)\r\n    let currentVideo = youtubeFullCode\r\n\r\n    var youtubeCode = getYouTubeID(currentVideo)\r\n\r\n    if (arrayNum < -1) {\r\n        nextHandler()\r\n    }\r\n\r\n    const opts = {\r\n        height: '520',\r\n        width: '1080',\r\n        playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n            setVolume: 50\r\n        },\r\n    }\r\n\r\n    return (\r\n        <div className=\"card bg-dark m-4 rounded \">\r\n            {/* <p>current array item: {arrayNum}</p>\r\n            <p>current array length: {youtubeArray.length}</p>\r\n            <p>{youtubeArray[0]}</p> */}\r\n            <div className=\"card-body bg-dark mx-5 d-flex justify-content-center btn-group\">\r\n                <div >\r\n                    {arrayNum > 0 && <button className=\"btn btn-outline-light\" onClick={prevHandler}>back</button>}\r\n                    {arrayNum < totalVideoAvailable - 1 && <button className=\"btn btn-outline-light\" onClick={nextHandler}>next video</button>}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <YouTube videoId={youtubeCode} opts={opts} onReady={onReady} />\r\n                {/* <iframe width=\"560\" height=\"315\"\r\n                    src={currentVideo} title=\"YouTube video player\"\r\n                    frameborder=\"0\"\r\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\r\n                </iframe> */}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default VideoContent","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\WelcomeBack.js",["97"],"import useAuth from \"../server/spotifyAuth\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { AnimationWrapper } from 'react-hover-animation'\r\nimport title from '../images/title.png';\r\nimport welcome from '../images/welcome.png';\r\nimport styles from './welcomeStyles.module.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction WelcomeBack(props) {\r\n\r\n    var authCode = props.newCode\r\n    console.log(authCode)\r\n\r\n\r\n    localStorage.setItem(\"spotifyCode\", `${authCode}`)\r\n\r\n    useAuth(authCode)\r\n\r\n\r\n    const isAuth = useSelector((state) => state.spotify.isSpotifyAuth)\r\n    var accesstoken = useSelector((state) => state.spotify.accesstoken)\r\n    console.log(`welcome back comp loaded is auth ${isAuth}`)\r\n    console.log(`welcome back comp loaded is current access token ${accesstoken}`)\r\n    localStorage.setItem(\"spotifyToken\", `${accesstoken}`)\r\n\r\n\r\n    return (\r\n        <div className={styles.bg}>\r\n            <div className={styles.containerdiv}>\r\n                <div className={styles.drop}>\r\n                    <img className=\"img-fluid\" alt=\"\" src={welcome}></img>\r\n                </div>\r\n                <div className=\"card text-center\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">Welcome to atmos! </h5>\r\n                        <p className=\"card-text\">While using the app we combine youtube and spotify to allow you to both listen and watch anything of your choosing! Click whichever genre you would like to enjoy and relax!</p>\r\n                        <div>\r\n                            <AnimationWrapper>\r\n                                <Link to=\"/menu\" className=\"m-3 btn btn-success\">Continue</Link>\r\n                            </AnimationWrapper>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default WelcomeBack","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\Navbar.js",["98"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport menu from '../images/menubtn.png';\r\nimport room from '../images/yourRoom.png';\r\nimport title from '../images/altTitle.png';\r\n\r\n\r\nconst buttonStyles = {\r\n    cursor: 'pointer'\r\n}\r\nfunction AtmosNavbar() {\r\n\r\n    return (\r\n        <nav className=\"bg-primary\">\r\n            <div className=\"container-fluid d-flex justify-content-between\">\r\n                <div className=\"pb-4\">\r\n                    <img alt=\"menu\" src={title}></img>\r\n                </div>\r\n                <div className=\"navbarbtn d-flex align-self-center\">\r\n                    <Link to=\"/menu\" ><img alt=\"menu\" style={buttonStyles} src={menu}></img></Link>\r\n                    {/* <Link to=\"/dashboard\"><img alt=\"room\" src={room}></img></Link> */}\r\n                </div>\r\n            </div>\r\n        </nav>)\r\n}\r\n\r\nexport default AtmosNavbar","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\SpotifyPlayer.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\MusicForm.js",["99"],"import MusicButton from \"./MusicButton\"\r\nimport { useEffect } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport SpotifyWebApi from \"spotify-web-api-node\"\r\n\r\n\r\n\r\nfunction MusicForm(props) {\r\n    var musicid = useSelector((state) => state.spotify.clientid)\r\n    const musicToken = localStorage.getItem(\"spotifyToken\")\r\n    const musicChoice = useSelector((state) => state.content.musicButtonChoice)\r\n\r\n\r\n    const spotifyApi = new SpotifyWebApi({\r\n        clientId: `${musicid}`,\r\n    })\r\n\r\n    spotifyApi.setAccessToken(`${musicToken}`)\r\n\r\n    useEffect(() => {\r\n        if (musicToken === \"none token\") return\r\n        spotifyApi.setAccessToken(musicToken)\r\n    }, [musicToken])\r\n\r\n\r\n    function updateContent(content) {\r\n        for (let i = 0; i < 10; i++) {\r\n            localStorage.setItem(`musicplaylistcode${i}`, `${content[i]}`)\r\n        }\r\n    }\r\n\r\n    if (musicChoice === \"none\") {\r\n        spotifyApi.searchPlaylists(\"peaceful\").then(\r\n            (res) => {\r\n                console.log(`music playlist res:`, res.body)\r\n                var playlistMusicItems = res.body.playlists.items\r\n                var playlistCodes = playlistMusicItems.map(playlist => {\r\n                    return playlist.uri\r\n                })\r\n                updateContent(playlistCodes)\r\n            }\r\n        ).catch((err) => {\r\n            console.log('Something went wrong!', err);\r\n        })\r\n    } else {\r\n        spotifyApi.searchPlaylists(`${musicChoice}`).then(\r\n            (res) => {\r\n                console.log(`music playlist res:`, res.body)\r\n                var playlistMusicItems = res.body.playlists.items\r\n                var playlistCodes = playlistMusicItems.map(playlist => {\r\n                    return playlist.uri\r\n                })\r\n                updateContent(playlistCodes)\r\n            }\r\n        ).catch((err) => {\r\n            console.log('Something went wrong!', err);\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card bg-dark m-4\">\r\n            <div className=\"card-body\">\r\n                <div className=\"d-flex flex-column justify-content-center\">\r\n                    <div className=\"card-title\">\r\n                        <h2>Music Choices</h2>\r\n                    </div>\r\n                    <div className=\"card-text\">\r\n                        <p>{`Your current music choice: ${musicChoice}`}</p>\r\n                    </div>\r\n                    <div className=\"d-flex flex-column justify-content-center\">\r\n                        <MusicButton musicKeyword=\"Piano\" />\r\n                        <MusicButton musicKeyword=\"Coffee Shop\" />\r\n                        <MusicButton musicKeyword=\"Acoustic\" />\r\n                        <MusicButton musicKeyword=\"Lofi\" />\r\n                        <MusicButton musicKeyword=\"Yoga\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MusicForm","C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\VideoForm.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\server\\spotifyAuth.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\MusicButton.js",[],"C:\\Users\\jento\\Desktop\\Projects\\practice projects\\atmos-project\\client\\src\\components\\VideoButton.js",[],{"ruleId":"100","severity":1,"message":"101","line":4,"column":10,"nodeType":"102","messageId":"103","endLine":4,"endColumn":21},{"ruleId":"100","severity":1,"message":"104","line":3,"column":8,"nodeType":"102","messageId":"103","endLine":3,"endColumn":14},{"ruleId":"100","severity":1,"message":"105","line":4,"column":8,"nodeType":"102","messageId":"103","endLine":4,"endColumn":13},{"ruleId":"100","severity":1,"message":"106","line":4,"column":8,"nodeType":"102","messageId":"103","endLine":4,"endColumn":12},{"ruleId":"107","severity":1,"message":"108","line":23,"column":8,"nodeType":"109","endLine":23,"endColumn":20,"suggestions":"110"},"no-unused-vars","'useNavigate' is defined but never used.","Identifier","unusedVar","'styles' is defined but never used.","'title' is defined but never used.","'room' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'spotifyApi'. Either include it or remove the dependency array.","ArrayExpression",["111"],{"desc":"112","fix":"113"},"Update the dependencies array to be: [musicToken, spotifyApi]",{"range":"114","text":"115"},[679,691],"[musicToken, spotifyApi]"]